结构
11.1 什么是结构
结构和类的最重要的区别：
1，类是引用类型，而结构是值类型；
2，结构是隐私密封的，这意味着不能从它们派生其他结构

11.2 结构是值类型
结构类型的变量不能为null；
两个结构变量不能引用同一个对象。
结构在栈内存中。

11.3 对结构赋值
把结构体赋值给另一个结构体，就是将一个结构的值复制给另一个结构。

11.4 构造函数和析构函数
结构可以有实例构造函数和静态构造函数，但不允许有析构函数。
11.4.1 实例构造函数
对于每个结构体，都存在预定义的无参数构造函数，而且不能删除或重定义。但是可以创建另外的构造函数，只要它们有参数。
可以使用new运算符创建结构体，也可以不使用new运算符创建结构的实例。然而这样做，有一些限制：
1，在显示设置数据成员之后，才能使用它们的值；
2，在对所有数据成员赋值之后，才能调用结构的函数成员。
11.4.2 静态构造函数
与类相似，结构的静态构造函数创建并初始化静态数据成员，而且不能引用实例成员。
以下两种行为，任意一种发生之前，将会调用静态构造函数。
1，调用显示声明的构造函数；
2，引用结构的静态成员。
11.4.3 构造函数和析构函数小结

11.5 属性和字段初始化语句
在声明结构体时，不允许使用实例属性和字段初始化语句。
但是，结构体的静态属性和静态字段都可以在声明结构体时进行初始化，即使结构体本身不是静态的。

11.6 结构是密封的
由于结构不支持继承，个别类成员修饰符用在结构成员上将没有意义，比如：
protected protected internal abstract sealed virtual
结构本身派生自System.ValueType，而System.ValueType派生自object。

11.7 装箱和拆箱
如同其他值类型数据，如果想将一个结构实例作为引用类型对象，必须创建装箱的副本。装箱的过程就是制作值类型变量的引用类型副本。

11.8 结构作为返回值和参数
结构可以用作返回值和参数
ref和out参数：如果一个结构用作ref或out参数，传入方法的是该结构的一个引用，这样就可以修改其数据成员。

11.9 关于结构的更多内容
对结构进行分配的开销比创建类实例小，所以使用结构代替类有时可以提高性能，但要注意装箱和拆箱的高昂代价。
预定义简单类型(int,short,long,等等)，尽管在.NET和C#中被视为原始类型，但它们实际上在.NET中都实现为结构。

