2.1 矩阵的定义
我们利用矩阵简介地描述几何体的变换，例如缩放，旋转和平移。
除此之外，还可以借助矩阵将点或向量的坐标在不同的标架之间进行转换。
某些情况下，我们倾向于把矩阵的每一行都看作一个向量。

2.2 矩阵乘法
2.2.1 定义
如果A是一个m x n矩阵，B是一个n x p矩阵，那么，两者乘积AB的结果是一个规模为m x p的矩阵C。
矩阵C中第i行，第j列的元素，由矩阵A的第i个行向量与矩阵B的第j个列向量的点积求得。
为了使矩阵乘积AB有意义，矩阵A中的列数与矩阵B中的行数必须相同。
矩阵的乘法一般不满足交换律。

2.2.2 向量与矩阵乘法
对于一个1xn行向量u与一个nxm矩阵A，我们总可得到u所给出的标量系数与A中诸行向量的线性组合uA。

2.2.3 结合律
矩阵乘法满足结合律。

2.3 转置矩阵

2.4 单位矩阵
单位矩阵：主对角线上的元素均为1，其他元素都为0的方阵。

2.5 矩阵的行列式
行列式是一种特殊的函数，它以一个方阵作为输入，并输出一个实数。
方阵A的行列式通常表示为det A。
学习行列式的主要目的是：利用它推导出求逆矩阵的公式。
方阵A是可逆的，当且仅当det A != 0。

2.5.1 余子阵
余子阵Aij即为从A中取出第i行和第j列的(n-1)x(n-1)矩阵。

2.5.2 行列式的定义
矩阵的行列式是一种递归定义，例如一个4x4矩阵的行列式要根据3x3矩阵的行列式来定义。
1x1矩阵的行列式就是本身。
行列式计算公式见书本。

2.6 伴随矩阵
设A为一个nxn矩阵。乘积Cij=(-1)i+j detAij称为元素Aij的代数余子式。
如果为矩阵A中的每个元素分别计算出Cij，并将它置于矩阵Ca中的第i行，第j列的相应位置，那么将获得矩阵A的代数余子式矩阵。
若取证据Ca的转置矩阵，将得到矩阵A的伴随矩阵。

2.7 逆矩阵
不是每个方阵都有逆矩阵，存在逆矩阵的方阵称为可逆矩阵，不存在逆矩阵的方阵称为奇异矩阵。
A的逆矩阵等于A的伴随矩阵除以A行列式。
对于规模较小的矩阵来说，运用伴随矩阵的方法将得到不错的计算效率。

2.8 用DirectXMath库处理矩阵

2.8.1 矩阵类型
DirectXMath以定义在DirectXMath.h头文件中的XMMATRIX类来表示4x4矩阵。
XMMATRIX由4个XMVECTOR实例所构成，并借此来使用SIMD技术。
除了构造方法还可以使用XMMatrixSet函数来创建XMMATRIX实例。
就像通过XMFLOATn来存储类中不同维度的向量一样，DirectXMath文档也建议我们用XMFLOAT4X4来存储类中的矩阵类型数据成员。
通过下列方法将数据从XMFLOAT4X4内加载到XMMATRIX中：
inline XMMATRIX XM_CALLCONV XMLoadFloat4x4(const XMFLOAT4X4* pSource)
通过下列方法将数据从XMMATRIX内存储到XMFLOAT4X4中：
inline void XM_CALLCONV XMStoreFloat4x4(XMFLOAT4X4* pDestination, FXMMATRIX M)

2.8.2 矩阵函数
DirectXMath库包含了下列与矩阵相关的实用函数：
//返回单位矩阵
inline XMMATRIX XM_CALLCONV XMMatrixIdentity()
//判断M是否是单位矩阵
inline bool XM_CALLCONV XMMatrixIsInfinite(FXMMATRIX M)
//返回矩阵乘积
inline XMMATRIX XM_CALLCONV XMMatrixMultiply(FXMMATRIX M1, CXMMATRIX M2)
//返回转置矩阵
inline XMMATRIX XM_CALLCONV XMMatrixTranspose(FXMMATRIX M)
//返回(det M,det M,det M,det M)
inline XMVECTOR XM_CALLCONV XMMatrixDeterminant(FXMMATRIX M)
//返回逆矩阵
inline XMMATRIX XM_CALLCONV XMMatrixInverse(XMVECTOR* pDeterminant, FXMMATRIX  M)
假设传入函数的FXMVECTOR参数不超过两个，则第一个XMMATRIX参数应当为FXMMATRIX,其余XMMATRIX参数均应为CXMMATRIX。
//在32位的Windows系统上，__fastcall调用约定通过寄存器传递前3个XMVECTOR参数，其余的参数则存在堆栈上
typedef const XMMATRIX& FXMMATRIX;
typedef const XMMATRIX& CXMMATRIX;
//在32位的Windows系统上，__vectorcall调用约定通过寄存器传递前6个XMVECTOR参数，其余的参数则存在堆栈上
typedef const XMMATRIX FXMMATRIX;
typedef const XMMATRIX& CXMMATRIX;
可以看出，在32位Windows操作系统上的__fastcall调用约定中，XMMATRIX类型的参数是不能传至SSE/SSE2寄存器的，因为这些寄存器此时只支持3个XMVECTOR参数传入。
DirectXMath建议用户总是在构造函数中采用CXMMATRIX类型来获取XMMATRIX参数，而且对于构造函数也不需要使用XM_CALLCONV约定注解。

2.8.3 DirectXMath矩阵示例程序
