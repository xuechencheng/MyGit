Win32 API是一套暴露给用户的底层函数与结构体，我们通过C语言调用它即可创建Windows应用程序。
例如，要定义一个窗口类，我们就要填写Win32 API中的WNDCLASS结构体实例，要创建一个窗口，就要调用CreateWindow函数；要通知Windows系统呈现一个特定的窗口，就要使用Win32 API中的ShowWindow函数。
1 概述
1.1 资源

1.2 事件，消息队列，消息以及消息循环
凡是Windows应用程序就要依从事件驱动程序模型。一般来讲，应用程序总会坐等某事的发生，即事件的发生。
生成事件的方式多种多样，常见的例子有键盘按键，点击鼠标，或者是窗口的创建，调整大小，移动，关闭，最小化，最大化乃至"隐身"。
当事件发生时，Windows会向发生事件的应用程序发送相应的消息，随后，该消息会被添加至此应用程序的消息队列之中。
应用程序会在消息循环中不断地检查队列中的消息，在接收到消息之后，它会将此消息分派到相应窗口的窗口过程。
每个窗口都有一个与之关联的名为窗口过程的函数。我们实现的窗口过程函数中写有处理特定消息的代码。
我们应将目标窗口不处理的消息转发至Win32 API所提供的默认窗口过程DefWindowProc，让它去完成相应处理。

1.3 图形用户界面
对于Direct3D游戏编程来说，我们往往用不到过于复杂的GUI。事实上，在大多数情况下仅需一个主窗口即可，我们只是用它的工作区来渲染3D场景而已。

1.4 Unicode
Unicode标准以16位值来表示一个字符。这样一来，我们就能通过它庞大的字符集来表示国际字符以及一些其他符号。
C++语言中以wchar_t类型的宽字符来表示Unicode码。不论是在32位还是64位的Windows操作系统中，wchar_t都是16为字符类型。
在使用宽字符时，我们必须为字符串字面值冠以大写字母前缀L，例如：const wchar_t* wcstrPtr = L"Hello,World!"
在处理宽字符时还需要使用相应版本的字符串函数，例如，在获取宽字符串的长度时，应使用wcslen函数而非strlen函数；在复制宽字符串时，应用wcscpy函数代替strcpy函数，比较两个宽字符用wcscmp。
使用wchar_t类型指针。C++标准库还专门提供了宽字符版本的字符串类std::wstring。

2，基本的Windows应用程序
(Windows程序例子)

3 讲解基本Windows应用程序的工作流程
3.1 程序中的头文件，全局变量以及函数声明
在Windows编程中，我们通常采用Windows系统在内部为每个对象维护的句柄来处理相应的对象。

3.2 WinMain
Windows编程中所用的WinMain函数就相当于在C++编程时通常用到的main函数。
(WinMain函数各参数含义 DONE)

3.3 WNDCLASS结构体与实例注册
初始化窗口的第一步就是通过填写WNDCLASS结构体来描述窗口的基本属性。
(WNDCLASS结构体各参数含义)

3.4 创建并显示窗口
利用CreateWindow函数创建窗口
(CreateWindow各参数含义)
为显示窗口而必须调用两种函数:ShowWindow和UpdateWindow。

3.5 消息循环
在我们说编写的基本Windows应用程序之中，消息循环被封装在一个名为Run的函数内。
(MSG结构体)

3.6 窗口过程
在本章的这个基本Windows应用程序之中，我们将窗口过程函数命名为WndProc。
(WndProc各参数含义)

3.7 消息框函数
(MessageBox函数)

4 一种更灵活的消息循环
如果普通程序的消息队列中没有消息，那么函数GetMessage将使线程进入休眠状态，并等待消息的到来。
但与游戏程序相比，如果没有要处理的Windows消息就应执行游戏的逻辑代码。解决方法是以PeekMessage函数替代GetMessage函数。
