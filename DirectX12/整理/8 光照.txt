8.1 光照与材质的交互
在开启光照的同时，我们不再直接指出顶点的颜色，而是指定材质与光照，再运用光照方程基于两者的交互来计算顶点颜色。
我们可以把材质看作是确定光照与物体表面如何进行交互的属性集。
此属性集中的属性有：表面反射光和吸收光的颜色，表面下材质的折射率，表面的光滑度以及表面的透明度。
当光线从光源发出向外传播并触碰到某个物体时，一部分光线可能会被吸收，而另一部分光线将会被反射。被反射的光线会沿着它的新路径传播，并有可能再次碰到其他物体，发生二次吸收与反射。因此，还会发生这样一种情况，那就是在光线在碰到足够多的物体后被吸收，而一些剩余的光线最终可能会传入观察者的眼中。
视网膜含有三种受光体，分别对于红绿蓝光敏感。
本书中所采用的光照模型均为局部光照模型。使用这种模型，每个物体的光照皆独立于其他物体，我们就可以在处理光照的过程中仅考虑光源直接发出的光线(即在处理当前的物体光照时，忽略来自场景中其他物体说反弹来的光)。
全局光照模型除了要考虑由光源直接发出的光，还要顾及场景中其他物体反弹来的间接光照。另一种流行的方法是预计算静态物体的间接光照。

8.2 法向量
平面法线是一种描述多边形朝向的单位向量。
根据曲面法线即可确定对应曲面上某点的朝向。
为了求出曲面法线，我们仅先指定位于网格顶点处的曲面法线(也称为顶点法线)，接下来，为取得三角形网格曲面上每个点处的近似曲面法线，在三角形进行光栅化的过程中对这些顶点法线进行插值计算。

8.2.1 计算法向量
为了找到三角形p0p1p2的平面法线，我们首先计算位于三角形边上的两个向量：
u = p1 - p0; v = p2 - p0;
那么此三角形的平面法线即为:
n = u x v / |u x v|
对于可微的光滑曲面而言，我们可以利用微积分方面的知识来求出曲面点处的法线。
但问题在于，三角形网格运用一种被称为求顶点法线平均值的计算方法。此方法通过对网格中共享顶点v的多边形的平面法线求取平均值，从而获得网格中任意顶点v处的顶点法线n。
navg = (n0 + n1 + n2 + n3)/|n0 + n1 + n2 + n3|
为了获得更为精确的结果，我们还可以采用更加复杂的求平均值方法，比如说，根据多边形的面积来确定权重，以求取加权平均值。
(实现代码)

8.2.2 变换法向量
若给定一个用于变换点与向量的变换矩阵A，如何能够求出这样一个变换矩阵B：通过它来变换法向量，使经矩阵A变换后的切向量与法向量重归正交关系。
B = (A-1)T(推导过程见书本)
如果矩阵A是正交矩阵，那么B=A。

8.3 参与光照计算的一些关键向量

8.4 朗伯余弦定律
我们可以将光看作是光子的集合，在空间中按特定的方向传播。每个光子都载有能量。光源每秒发出的能量称为辐射通量。
单位面积上的辐射通量密度称为辐照度。
光线垂直照射到表面的强度要大于以某个角度照射到表面的强度。
面积A2内的辐照度就相当于将受垂直方向光照的面积A1内的辐照度按比例n*L=cosA进行缩放。这就是传说中的朗伯余弦定律。
考虑到光线照射到表面另一侧的情况，我们用max函数来限制缩放因子的取值范围：f(A) = max(cosA, 0) = max( L.n, 0)

8.5 漫反射光照
当光线照射到表面上的某一点时，一部分光会进入物体的内部，并与表面附近的物质相互作用。这些光会在物体内部四处反弹，其中一部分会被吸收，而余下部分会向各个方向散射并返回表面，这就是所谓的漫反射。
漫反射光照的计算与观察点无关。
(漫反射光量计算公式)

8.6 环境光照
(环境光计算公式)

8.7 镜面反射
如果折射光沿折射向量从介质的另一侧射出，并进入观察者的眼中，则该物体看起来就像是透明的。
与漫反射光相比，镜面光可能并不会射入观察者的眼内，因为其反射只发生在某一特定角度。也就是说，镜面光照的计算与观察点有关。
同时，这意味着随着观察位置在场景中的移动，它所收到的镜面光亮也随之发生改变。

8.7.1 菲涅尔效应
菲涅尔方程以数学方法描述了入射光线被反射的百分比，即0<=RF<=1。
根据能量守恒定律，如果RF是反射光量，则(1-RF)为折射光量。RF的值是一个RGB向量，因为光的颜色反映了反射光量。
反射的光量既依赖于介质也与法向量n和光向量L之间的夹角有关。
由于光照过程的复杂性，我们一般不会将完整的菲涅尔方程用于实时渲染，而是采用石里克近似法来加以代替：
(公式)
(石里克近似曲线图)
(菲涅尔效应的概念)
可以将菲涅尔效应简介地概括为：反射光量取决于材质以及法线与光向量之间的夹角。
金属会吸收透射光，这意味着它们不具有本体反射率。虽然如此，但金属并不会看上去表现为纯黑色，因为它们的Rf(0)值较高，也就是说，就算是在接近于0度这样极小的入射角度上，它们也能反射可观的镜面光量。

8.7.2 表面粗糙度
真实世界中的反射物体往往不是理想镜面。随着粗糙度的增加，微观表面法线的方向开始纷纷偏离宏观表面法线，由此反射光逐渐扩展为一个镜面瓣。
为了用数学方法对粗糙度进行建模，我们采用了微平面模型。在此模型中，我们将微观表面模拟为由多个即微小又平滑的微平面所构成的集合，而微观表面法线正是这些微平面上的法线。
针对指定的观察单位向量v以及光向量L，我们需要了解由L向v反射的所有微平面片段的分布情况；换言之，即法线为h=normalize(L+v)这种微平面片段在所有微平面中所占比例。
这样一来，就可以确定有多少光通过镜面反射的方式，以此路径进入到观察者的眼中，发生由L到v反射过程的微平面越多，则观察者在此角度上看到的镜面光越明亮。
由于向量h位列向量L与向量v间的中间位置，故称之为中间向量。此外，还要再引进一个中间向量h与宏观表面法线n之间的夹角θ。
我们定义归一化分布函数0<=p(θ)<=1，用来表示微观表面法线h与宏观表面法线n之间夹角为θ的微平面的分布情况。从直观上来讲，我们希望θ=0时，函数取得最大值。
用来模拟以上讨论中期望模型p(θ)的一种较流行的可控函数为：
(函数公式)
我们可以将p(θ)与某种归一化因子进行组合，从而获得基于粗糙度来模拟镜像反射光量的新函数：
(函数公式)
(菲涅尔反射以及表面粗糙度组合后的计算公式)

8.8 光照模型的概述
表面反射的光量相当于环境反射光，漫反射光以及镜面反射光的光量总和。
环境光：模拟经表面反射的间接光量；
漫反射光：对进入介质内部，又经过表面下吸收而最终散射出表面的光进行模拟。
镜面光：模拟经菲涅尔效应与表面粗糙度共同作用的表面反射光
(着色器中实现光照方程)

8.9 材质的实现
(Material结构体代码)
(BuildMaterials代码)
(其他代码见书本)

8.10 平行光源
由于光源距离物体十分遥远，我们忽略距离带来的影响，仅指定照射到场景中的光线的光强。

8.11 点光源
我们定义光向量与光传播方向相反。
在物理学中，光强会根据平方反比定律而随着距离函数发生衰减。
(光强公式)
然而，我们在这里却要使用一种更为简单的公式，这便是我们所用的线性衰减函数：
(衰减函数)

8.12 聚光灯光源
从本质上来说，聚光灯由位置Q向方向d照射出范围呈圆锥体的光。
光向量：L=(Q-P)/|Q-P|
P是被照点的位置，Q是聚光灯的位置。
位于圆锥体中心处的光线的光强应该是最强的，而随着角θ由0增加至θmax，光强会逐渐趋近于0。
(θ与光强之间的关系公式)
方向光计算最廉价，电光次之，聚光灯最昂贵。

8.13 光照的具体实现
8.13.1 Light结构体
(d3dUtil.h中Light结构体和LightingUtil.hlsl中对应的结构体)
结构体Light中的数据成员的排列顺序并不是随意指定的，这要遵从HLSL的结构体封装规则。(详情见附录B)
这条HLSL规则的大意是以填充对齐的方式，将结构体中的元素打包为4D向量。另外，单个元素不能以一分为二的方式分到两个4D向量之中。

8.13.2 常用辅助函数
下面3个函数定义于LightingUtil.hlsl文件中：
CalcAttenuation:实现了一种线性衰减因子的计算方法，可将其应用于点光源与聚光灯光源。
SchlickFresnel:代替菲涅尔方程的石里克近似。
BlinnPhong:计算反射到观察者眼中的光量，该值为漫反射光量与镜面反射光量的总和。
(3个函数的源码)

8.13.3 实现方向光源
给定观察位置E，材质属性，与以n为法线的表面上可见一点p，则下列HLSL函数将输出自某方向光源发出，经上述表面以方向v=normalize(E-p)反射入观察者眼中的光量。
(函数代码)

8.13.4 实现点光源
给出观察点E，以n作为法线的表面上可视一点p以及材质属性，则下面的HLSL函数将会输出从点光源放出，经上述表面在v = normalize(E-p)方向反射入观察者眼中的光量。
(函数代码)

8.13.5 实现聚光灯光源
指定观察点E，以n为法线的表面上可视一点p以及材质属性，则下面的HLSL函数将会输出来自聚光灯光源，经过上述表面以方向v=normalize(E-p)反射入观察者眼中的光量。
(函数代码)

8.13.6 多种光照的叠加
光强是可以叠加的。因此，在支持多个光源的场景中，我们需要遍历每一个光源，并把它们在我们要计算光照的点或像素上的贡献值求和。
代码所采用的约定是方向光源必须位于光照数组的开始部分，点光源次之，聚光灯光源排在末尾。
(计算光照的方程)

8.13.7 HLSL主文件
下面的代码含有本章演示程序中所用的顶点着色器与像素着色器，而其中所涉及的LightingUtil.hlsl文件中的HLSL代码。
(源码)

8.14 光照演示程序
8.14.1 顶点格式
8.14.2 计算法线
8.14.3 更新光照的方向
8.14.4 更新根签名
(例子源码)

















