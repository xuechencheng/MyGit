22 环境
Lua不使用全局变量，但又不遗余力的在Lua语言中对全局变量进行模拟。
我们可以认为Lua把所有的全局变量保存在一个称为全局环境的普通表中。
Lua语言将全局环境自身保存在全局变量_G中。

22.1 具有动态名称的全局变量

22.2 全局变量的声明
编程：禁止创建全局变量，并声明一个创建全局变量的方法
rawset可以绕过元方法
如果要测试一个变量是否存在，并不能简单地将它与nil比较，而应该使用rawget

22.3 非全局变量
一个自由名称是指没有关联到显式声明上的名称，即它不出现在对应局部变量的范围内。
local z = 10	x = y + z	x和y是自由名称，z不是
Lua语言将自由名称x转换为_ENV.x。
Lua语言是在一个名为_ENV的预定义上值存在的情况下编译所有的代码段的。
因此，所有的变量要么绑定到了一个名称的局部变量，要么是_ENV中的一个字段，而_ENV本身是一个局部变量（一个上值）。

22.4 使用_ENV
赋值语句_ENV=nil会使得后续代码不能直接访问全局变量。
通常_G和_ENV指的是同一个表，但是，它们是很不一样的实体。
_ENV是一个局部变量，所有对“全局变量”的访问实际上访问的都是_ENV。
_G则是一个在任何情况下都没有任何特殊状态的全局变量。
_ENV永远指向的是当前的环境，而假设在可见且无人改变过其值的前提下，_G通常指向的是全局变量。

22.5 环境和模块

22.6 _ENV和load
函数load通常把被加载代码段的上值_ENV初始化为全局变量。
函数load还有一个可选的第四个参数来让我们为_ENV指定一个不同的初始值。

