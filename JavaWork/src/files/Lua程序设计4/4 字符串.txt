第4章 字符串
最好在一切可能的情况下优先使用UTF-8编码。
Lua中的字符串是不可变值的。
使用长度操作符#获取字符串的长度。
使用连接操作符..来进行字符串连接。

4.1 字符串常量
使用双引号和单引号声明字符串是等价的。
在Lua5.3开始，可以使用转义序列\u{h..h}来声明UTF-8字符。

4.2 长字符串/多行字符串
可以使用一对双方括号来声明长字符串/多行字符串常量。并且内容中的转义序列不会被转义。
可以在两个左方括号之间加上任意数量的等号，如[===[和]===]。
对于注释而言，这种机制也同样有效。--[=[和]=]

4.3 强制类型转换
Lua语言在运行时提供了数字与字符串之间的自动转换。针对字符串的所有算术操作会尝试将字符串转换为数值。

4.4 字符串标准库
字符串标准库默认处理的是8bit字符，这对于某些编码适用，但对所有Unicode编码来说都不适用。
string.len(s)返回字符串s的长度，等价于#s。
string.sub(s,i,j)从字符串s中提取第i个到第j个字符。
函数string.format是用于进行字符串格式化和将数值输出为字符串的强大工具。
string.format("x = %d y = %d", 10, 20)
string.sub(s , i, j)等价于s:sub( i, j)
string.find用于在指定的字符串中进行模式搜索。
string.gsub把所有匹配的模式用另一个字符串替换。string.gsub("hello world", "l", ".")

4.5 Unicode编码
从Lua5.3开始，Lua语言引入了一个用于操作UTF-8编码的Unicode字符串的标准库。
UTF-8使用变长的多个字节来编码一个Unicode字符。
函数reverse,upper,lower,byte和char不适用于UTF-8字符串，这是因为它们针对的都是一字节字符。
函数string.format和string.rep适用于UTF-8字符串。
函数string.len和string.sub可以用于UTF-8字符串，其中索引以字节为单位而不是以字符为单位。通常这些函数就够用了。
函数utf8.len返回指定字符串中UTF-8字符的个数。
函数utf8.char和utf8.codepoint在UTF-8环境下等价于string.char和string.byte




