委托的定义：
public delegate void GreetingDelegate(string name);
public void GreetPeople(string name, GreetingDelegate MakeGreeting){
    MakeGreeting(name);
}

委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量使用If-Else(Switch)语句，同时使得程序具有更好的可扩展性。

可以将多个方法赋给同一个委托，或者叫将多个方法绑定到同一个委托，当调用这个委托的时候，将依次调用其所绑定的方法。
GreetingDelegate delegate1;
delegate1 = EnglishGreeting; // 先给委托类型的变量赋值
delegate1 += ChineseGreeting;   // 给此委托变量再绑定一个方法

使用委托可以将多个方法绑定到同一个委托变量，当调用此变量时(这里用“调用”这个词，是因为此变量代表一个方法)，可以依次调用所有绑定的方法。

Event出场了，它封装了委托类型的变量，使得：在类的内部，不管你声明它是public还是protected，它总是private的。在类的外部，注册“+=”和注销“-=”的访问限定符与你在声明事件时使用的访问符相同。
事件其实没什么不好理解的，声明一个事件不过类似于声明一个进行了封装的委托类型的变量而已。

event是一种特殊的delegate，定义它们的类里边，这二者是一样的，既可以采用 += 和-=的运算符号，也可以调用，但是在这个类之外，它们是不同的。

同为public类型，对于delegate，我们在定义它的类外，不仅可以采用 += 和-=的运算符号，还可随时调用；但是对于event，在类外只能采用 += 和-=的运算符号，不能调用，也就是event把它本身的invoke函数和括号调用的函数变成拥有这个event类的私有函数。