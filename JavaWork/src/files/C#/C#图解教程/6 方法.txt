6 方法
6.1 方法的结构
6.2 方法体内部的代码执行
6.3 局部变量
var表示任何可以从初始化语句的右边推断出的类型。

6.4 局部常量
关键字const

6.5 控制流
6.6 方法调用
6.7 返回值
6.8 返回语句和void方法
6.9 局部函数
从C#7.0开始，你可以在一个方法中声明另一个单独的方法。这种嵌入的方法称为局部函数。

6.10 参数
6.11 值参数
6.12 引用参数
使用引用参数时，必须在方法的声明和调用中都使用ref修饰符。
实参必须是变量，在用作实参前必须被赋值。

6.13 引用类型作为值参数和引用参数
将引用类型对象作为值参数传递，如果在方法内创建一个新对象并赋值给形参，将切断形参与实参之间的关联，并且在方法调用结束后，新对象不复存在。
将引用类型对象作为引用参数传递，如果在方法内创建一个新对象并赋值给形参，在方法结束后该对象依然存在，并且是实参所引用的值。

6.14 输出参数
输出参数的修饰符是out。
必须在声明和调用中都使用修饰符。
在方法内部，代码中每条可能的路径都必须为所有输出参数赋值。
在C#7.0开始，你不再需要预先声明一个变量来用作out参数。

6.15 参数数组
在一个参数列表中只能有一个参数数组。
如果有，它必须是列表中的最后一个。
在数据类型前使用params修饰符。
可以使用两种方式为参数数组提供实参：1，一个用逗号分隔的该数据类型元素的列表；2，一个该数据类型元素的一维数组。

6.16 参数类型总结
4种参数类型：值，引用ref，输出out和数组params

6.17 ref局部变量和ref返回
ref返回功能允许你将一个引用发送到方法外。
public ref int RefToValue(){return ref Score;}
Simple s = new Simple(); ref int v1 = ref s.RefToValue()
ref局部变量允许一个变量是另一个变量的别名。
ref int y = ref x;

6.18 方法重载
6.19 命名参数
c.Calc(c:2,a:4,b:3)
调用时候，可以同时使用位置参数和命名参数，但所有位置参数必须先列出来。

6.20 可选参数
所谓可选参数就是可以在调用方法的时候包含这个参数，也可以省略它。
只要值类型的默认值在编译时可以确定，就可以使用值类型作为可选参数。
只有在默认值是null的时候，引用类型才可以用作可选参数。

6.21 栈帧
6.22 递归














