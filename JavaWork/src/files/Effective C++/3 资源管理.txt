3 资源管理
所谓资源就是，一旦用了它，将来必须还给系统。
条款13 以对象管理资源
以对象管理资源的两个关键想法：
1，获得资源后立刻放进管理对象内；
2，管理对象运用析构函数确保资源被释放。
auto_ptr有一个特殊的性质：通过copy构造函数或copy assignment操作符复制它们，它们会变成null，而复制所得的指针将取得资源的唯一拥有权。
受autp_ptrs管理的资源必须绝对没有一个以上的auto_ptr同时指向它。这意味着auto_ptrs并非管理动态分配资源的神兵利器。
auto_ptr的替代方案是“引用计数型智慧指针”（RCSP）。
RCSP提供的行为类似垃圾回收，不同的是RCSP无法打破环状引用（例如，两个其实已经没被使用的对象彼此互指）。
trl::shared_ptr就是个RCSP。
auto_ptr和shared_ptr两者都在其析构函数内做delete而不是delete[]动作。这意味着在动态分配而得的array身上使用auto_ptr和shared_ptr是馊主意。
并没有特别针对C++动态分配数组设计类似的智能指针，因为vector和string几乎总是可以取代动态分配而得的数组。

条款14：在资源管理类中小心copying行为
然而并非所有资源都是heap-based，对那种资源而言，像auto_ptr和shared_ptr这样的只能指针往往不适合作为资源掌握者。既然如此，有可能偶尔你会发现，你需要建立自己的资源管理类。


