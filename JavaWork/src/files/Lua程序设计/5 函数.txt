第5章 函数
一个函数若只有一个参数，并且此参数是一个字面字符串或table构造式，那么圆括号便是可有可无的。
表达式o.foo(o,x)的另一种写法是o:foo(x)，冒号操作符使调用o.foo时将o隐含地作为函数的第一个参数。
一个Lua程序既可以使用以Lua编写的函数，又可以调用以C语言编写的函数。无论一个函数是用Lua编写的还是用C语言编写的，在调用它时没有任何区别。
调用函数时提供的实参数量可以与形参数量不同。Lua会自动调整实参的数量，以匹配参数表的要求。

5.1 多重返回值
Lua具有一项非常与众不同的特征，允许函数返回多个结果。
编程：查找数组中最大元素，并返回该元素的位置
如果一个函数调用不是一系列表达式的最后一个元素，那么将只产生一个值。
当一个函数调用作为另一个函数调用的最后一个实参时，第一个函数的所有返回值都将作为实参传入第二个函数。
也可以将一个函数调用放入一对圆括号中，从而迫使它只返回一个结果。
关于多重返回值有一个特殊函数--unpack，它接受一个数组作为参数，并从下标1开始返回该数组的所有元素。
编程：用Lua实现unpack函数

5.2 变长参数
编程：编写返回所有参数的总和的函数。
参数表中的3个点，表示该函数可接受不同数量的实参。
表达式"..."的行为类似于一个具有多重返回值的函数，它返回的是当前函数的所有变长参数。
某些特殊情况下，变长参数中可能会包含一些故意传入的nil，那么此时就需要用函数select来访问变长参数了。
调用select时，必须传入一个固定实参selector和一系列变长参数。如果selector为数字n，那么select返回它的第n个可变实参；否则，selector只能为字符串“#”，返回变长参数的总数。

5.3 具名实参
function rename(arg) return os.rename(arg.old,arg.new) end
rename(old="temp.lua", new="temp1.lua")




